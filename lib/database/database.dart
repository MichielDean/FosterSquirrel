import 'dart:io';
import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;

import 'tables.dart';

part 'database.g.dart';

/// Main application database using Drift
///
/// This database manages all squirrel tracking data including:
/// - Squirrels (baby squirrels being rehabilitated)
/// - Feeding Records (individual feeding sessions)
/// - Care Notes (observations and care notes)
///
/// Drift provides:
/// - Type-safe queries with compile-time validation
/// - Automatic schema migration generation
/// - Foreign key support with cascade deletes
/// - Reactive queries with streams
@DriftDatabase(tables: [Squirrels, FeedingRecords, CareNotes])
class AppDatabase extends _$AppDatabase {
  AppDatabase() : super(_openConnection());

  /// Constructor for testing with a custom executor (e.g., in-memory database)
  AppDatabase.forTesting(super.e);

  /// Current schema version - increment when making schema changes
  /// Then run: dart run drift_dev make-migrations
  @override
  int get schemaVersion => 1;

  /// Migration strategy for schema changes
  @override
  MigrationStrategy get migration {
    return MigrationStrategy(
      onCreate: (Migrator m) async {
        // Create all tables
        await m.createAll();

        // Create indexes for better query performance
        await _createIndexes();
      },
      onUpgrade: (Migrator m, int from, int to) async {
        // Future migrations will be added here using stepByStep helper
        // Generated by: dart run drift_dev make-migrations
      },
      beforeOpen: (details) async {
        // Enable foreign key constraints
        await customStatement('PRAGMA foreign_keys = ON');
      },
    );
  }

  /// Create database indexes for query performance
  Future<void> _createIndexes() async {
    // Index on squirrel status for filtering
    await customStatement(
      'CREATE INDEX IF NOT EXISTS idx_squirrels_status ON squirrels (status)',
    );

    // Index on feeding records by squirrel and feeding time
    await customStatement(
      'CREATE INDEX IF NOT EXISTS idx_feeding_records_squirrel_time '
      'ON feeding_records (squirrel_id, feeding_time)',
    );

    // Index on care notes by squirrel and type
    await customStatement(
      'CREATE INDEX IF NOT EXISTS idx_care_notes_squirrel_type '
      'ON care_notes (squirrel_id, note_type)',
    );

    // Partial index on important care notes for faster filtering
    await customStatement(
      'CREATE INDEX IF NOT EXISTS idx_care_notes_important '
      'ON care_notes (is_important) WHERE is_important = 1',
    );
  }
}

/// Opens a connection to the database
LazyDatabase _openConnection() {
  return LazyDatabase(() async {
    final dbFolder = await getApplicationDocumentsDirectory();
    final file = File(p.join(dbFolder.path, 'squirrel_tracker.db'));
    return NativeDatabase(file);
  });
}

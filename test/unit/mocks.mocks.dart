// Mocks generated by Mockito 5.4.6 from annotations
// in foster_squirrel/test/unit/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:drift/drift.dart' as _i2;
import 'package:drift/src/runtime/executor/stream_queries.dart' as _i4;
import 'package:foster_squirrel/database/database.dart' as _i3;
import 'package:foster_squirrel/models/models.dart' as _i8;
import 'package:foster_squirrel/repositories/drift/care_note_repository.dart'
    as _i10;
import 'package:foster_squirrel/repositories/drift/feeding_repository.dart'
    as _i9;
import 'package:foster_squirrel/repositories/drift/squirrel_repository.dart'
    as _i7;
import 'package:foster_squirrel/repositories/drift/weight_repository.dart'
    as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeMigrationStrategy_0 extends _i1.SmartFake
    implements _i2.MigrationStrategy {
  _FakeMigrationStrategy_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$AppDatabaseManager_1 extends _i1.SmartFake
    implements _i3.$AppDatabaseManager {
  _Fake$AppDatabaseManager_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$SquirrelsTable_2 extends _i1.SmartFake
    implements _i3.$SquirrelsTable {
  _Fake$SquirrelsTable_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$FeedingRecordsTable_3 extends _i1.SmartFake
    implements _i3.$FeedingRecordsTable {
  _Fake$FeedingRecordsTable_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$CareNotesTable_4 extends _i1.SmartFake
    implements _i3.$CareNotesTable {
  _Fake$CareNotesTable_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamQueryUpdateRules_5 extends _i1.SmartFake
    implements _i2.StreamQueryUpdateRules {
  _FakeStreamQueryUpdateRules_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDriftDatabaseOptions_6 extends _i1.SmartFake
    implements _i2.DriftDatabaseOptions {
  _FakeDriftDatabaseOptions_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGeneratedDatabase_7 extends _i1.SmartFake
    implements _i2.GeneratedDatabase {
  _FakeGeneratedDatabase_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabaseConnection_8 extends _i1.SmartFake
    implements _i2.DatabaseConnection {
  _FakeDatabaseConnection_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQueryExecutor_9 extends _i1.SmartFake implements _i2.QueryExecutor {
  _FakeQueryExecutor_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamQueryStore_10 extends _i1.SmartFake
    implements _i4.StreamQueryStore {
  _FakeStreamQueryStore_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabaseConnectionUser_11 extends _i1.SmartFake
    implements _i2.DatabaseConnectionUser {
  _FakeDatabaseConnectionUser_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMigrator_12 extends _i1.SmartFake implements _i2.Migrator {
  _FakeMigrator_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_13<T1> extends _i1.SmartFake implements _i5.Future<T1> {
  _FakeFuture_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInsertStatement_14<T1 extends _i2.Table, D1> extends _i1.SmartFake
    implements _i2.InsertStatement<T1, D1> {
  _FakeInsertStatement_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUpdateStatement_15<T extends _i2.Table, D> extends _i1.SmartFake
    implements _i2.UpdateStatement<T, D> {
  _FakeUpdateStatement_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSimpleSelectStatement_16<T1 extends _i2.HasResultSet, D>
    extends _i1.SmartFake
    implements _i2.SimpleSelectStatement<T1, D> {
  _FakeSimpleSelectStatement_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeJoinedSelectStatement_17<FirstT extends _i2.HasResultSet, FirstD>
    extends _i1.SmartFake
    implements _i2.JoinedSelectStatement<FirstT, FirstD> {
  _FakeJoinedSelectStatement_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBaseSelectStatement_18<Row> extends _i1.SmartFake
    implements _i2.BaseSelectStatement<Row> {
  _FakeBaseSelectStatement_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeleteStatement_19<T1 extends _i2.Table, D1> extends _i1.SmartFake
    implements _i2.DeleteStatement<T1, D1> {
  _FakeDeleteStatement_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSelectable_20<T> extends _i1.SmartFake implements _i2.Selectable<T> {
  _FakeSelectable_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGenerationContext_21 extends _i1.SmartFake
    implements _i2.GenerationContext {
  _FakeGenerationContext_21(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AppDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDatabase extends _i1.Mock implements _i3.AppDatabase {
  MockAppDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get schemaVersion =>
      (super.noSuchMethod(Invocation.getter(#schemaVersion), returnValue: 0)
          as int);

  @override
  _i2.MigrationStrategy get migration =>
      (super.noSuchMethod(
            Invocation.getter(#migration),
            returnValue: _FakeMigrationStrategy_0(
              this,
              Invocation.getter(#migration),
            ),
          )
          as _i2.MigrationStrategy);

  @override
  _i3.$AppDatabaseManager get managers =>
      (super.noSuchMethod(
            Invocation.getter(#managers),
            returnValue: _Fake$AppDatabaseManager_1(
              this,
              Invocation.getter(#managers),
            ),
          )
          as _i3.$AppDatabaseManager);

  @override
  _i3.$SquirrelsTable get squirrels =>
      (super.noSuchMethod(
            Invocation.getter(#squirrels),
            returnValue: _Fake$SquirrelsTable_2(
              this,
              Invocation.getter(#squirrels),
            ),
          )
          as _i3.$SquirrelsTable);

  @override
  _i3.$FeedingRecordsTable get feedingRecords =>
      (super.noSuchMethod(
            Invocation.getter(#feedingRecords),
            returnValue: _Fake$FeedingRecordsTable_3(
              this,
              Invocation.getter(#feedingRecords),
            ),
          )
          as _i3.$FeedingRecordsTable);

  @override
  _i3.$CareNotesTable get careNotes =>
      (super.noSuchMethod(
            Invocation.getter(#careNotes),
            returnValue: _Fake$CareNotesTable_4(
              this,
              Invocation.getter(#careNotes),
            ),
          )
          as _i3.$CareNotesTable);

  @override
  Iterable<_i2.TableInfo<_i2.Table, Object?>> get allTables =>
      (super.noSuchMethod(
            Invocation.getter(#allTables),
            returnValue: <_i2.TableInfo<_i2.Table, Object?>>[],
          )
          as Iterable<_i2.TableInfo<_i2.Table, Object?>>);

  @override
  List<_i2.DatabaseSchemaEntity> get allSchemaEntities =>
      (super.noSuchMethod(
            Invocation.getter(#allSchemaEntities),
            returnValue: <_i2.DatabaseSchemaEntity>[],
          )
          as List<_i2.DatabaseSchemaEntity>);

  @override
  _i2.StreamQueryUpdateRules get streamUpdateRules =>
      (super.noSuchMethod(
            Invocation.getter(#streamUpdateRules),
            returnValue: _FakeStreamQueryUpdateRules_5(
              this,
              Invocation.getter(#streamUpdateRules),
            ),
          )
          as _i2.StreamQueryUpdateRules);

  @override
  _i2.DriftDatabaseOptions get options =>
      (super.noSuchMethod(
            Invocation.getter(#options),
            returnValue: _FakeDriftDatabaseOptions_6(
              this,
              Invocation.getter(#options),
            ),
          )
          as _i2.DriftDatabaseOptions);

  @override
  _i2.GeneratedDatabase get attachedDatabase =>
      (super.noSuchMethod(
            Invocation.getter(#attachedDatabase),
            returnValue: _FakeGeneratedDatabase_7(
              this,
              Invocation.getter(#attachedDatabase),
            ),
          )
          as _i2.GeneratedDatabase);

  @override
  _i2.DatabaseConnection get connection =>
      (super.noSuchMethod(
            Invocation.getter(#connection),
            returnValue: _FakeDatabaseConnection_8(
              this,
              Invocation.getter(#connection),
            ),
          )
          as _i2.DatabaseConnection);

  @override
  _i2.SqlTypes get typeMapping =>
      (super.noSuchMethod(
            Invocation.getter(#typeMapping),
            returnValue: _i6.dummyValue<_i2.SqlTypes>(
              this,
              Invocation.getter(#typeMapping),
            ),
          )
          as _i2.SqlTypes);

  @override
  _i2.QueryExecutor get executor =>
      (super.noSuchMethod(
            Invocation.getter(#executor),
            returnValue: _FakeQueryExecutor_9(
              this,
              Invocation.getter(#executor),
            ),
          )
          as _i2.QueryExecutor);

  @override
  _i4.StreamQueryStore get streamQueries =>
      (super.noSuchMethod(
            Invocation.getter(#streamQueries),
            returnValue: _FakeStreamQueryStore_10(
              this,
              Invocation.getter(#streamQueries),
            ),
          )
          as _i4.StreamQueryStore);

  @override
  _i2.DatabaseConnectionUser get resolvedEngine =>
      (super.noSuchMethod(
            Invocation.getter(#resolvedEngine),
            returnValue: _FakeDatabaseConnectionUser_11(
              this,
              Invocation.getter(#resolvedEngine),
            ),
          )
          as _i2.DatabaseConnectionUser);

  @override
  _i2.Migrator createMigrator() =>
      (super.noSuchMethod(
            Invocation.method(#createMigrator, []),
            returnValue: _FakeMigrator_12(
              this,
              Invocation.method(#createMigrator, []),
            ),
          )
          as _i2.Migrator);

  @override
  _i5.Future<void> beforeOpen(
    _i2.QueryExecutor? executor,
    _i2.OpeningDetails? details,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#beforeOpen, [executor, details]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Stream<T> createStream<T extends Object>(
    _i4.QueryStreamFetcher<T>? stmt,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createStream, [stmt]),
            returnValue: _i5.Stream<T>.empty(),
          )
          as _i5.Stream<T>);

  @override
  T alias<T, D>(_i2.ResultSetImplementation<T, D>? table, String? alias) =>
      (super.noSuchMethod(
            Invocation.method(#alias, [table, alias]),
            returnValue: _i6.dummyValue<T>(
              this,
              Invocation.method(#alias, [table, alias]),
            ),
          )
          as T);

  @override
  void markTablesUpdated(Iterable<_i2.TableInfo<_i2.Table, dynamic>>? tables) =>
      super.noSuchMethod(
        Invocation.method(#markTablesUpdated, [tables]),
        returnValueForMissingStub: null,
      );

  @override
  void notifyUpdates(Set<_i2.TableUpdate>? updates) => super.noSuchMethod(
    Invocation.method(#notifyUpdates, [updates]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Stream<Set<_i2.TableUpdate>> tableUpdates([
    _i2.TableUpdateQuery? query = const _i2.TableUpdateQuery.any(),
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#tableUpdates, [query]),
            returnValue: _i5.Stream<Set<_i2.TableUpdate>>.empty(),
          )
          as _i5.Stream<Set<_i2.TableUpdate>>);

  @override
  _i5.Future<T> doWhenOpened<T>(
    _i5.FutureOr<T> Function(_i2.QueryExecutor)? fn,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#doWhenOpened, [fn]),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#doWhenOpened, [fn]),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_13<T>(this, Invocation.method(#doWhenOpened, [fn])),
          )
          as _i5.Future<T>);

  @override
  _i2.InsertStatement<T, D> into<T extends _i2.Table, D>(
    _i2.TableInfo<T, D>? table,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#into, [table]),
            returnValue: _FakeInsertStatement_14<T, D>(
              this,
              Invocation.method(#into, [table]),
            ),
          )
          as _i2.InsertStatement<T, D>);

  @override
  _i2.UpdateStatement<Tbl, R> update<Tbl extends _i2.Table, R>(
    _i2.TableInfo<Tbl, R>? table,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#update, [table]),
            returnValue: _FakeUpdateStatement_15<Tbl, R>(
              this,
              Invocation.method(#update, [table]),
            ),
          )
          as _i2.UpdateStatement<Tbl, R>);

  @override
  _i2.SimpleSelectStatement<T, R> select<T extends _i2.HasResultSet, R>(
    _i2.ResultSetImplementation<T, R>? table, {
    bool? distinct = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#select, [table], {#distinct: distinct}),
            returnValue: _FakeSimpleSelectStatement_16<T, R>(
              this,
              Invocation.method(#select, [table], {#distinct: distinct}),
            ),
          )
          as _i2.SimpleSelectStatement<T, R>);

  @override
  _i2.JoinedSelectStatement<T, R> selectOnly<T extends _i2.HasResultSet, R>(
    _i2.ResultSetImplementation<T, R>? table, {
    bool? distinct = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#selectOnly, [table], {#distinct: distinct}),
            returnValue: _FakeJoinedSelectStatement_17<T, R>(
              this,
              Invocation.method(#selectOnly, [table], {#distinct: distinct}),
            ),
          )
          as _i2.JoinedSelectStatement<T, R>);

  @override
  _i2.BaseSelectStatement<_i2.TypedResult> selectExpressions(
    Iterable<_i2.Expression<Object>>? columns,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#selectExpressions, [columns]),
            returnValue: _FakeBaseSelectStatement_18<_i2.TypedResult>(
              this,
              Invocation.method(#selectExpressions, [columns]),
            ),
          )
          as _i2.BaseSelectStatement<_i2.TypedResult>);

  @override
  _i2.DeleteStatement<T, D> delete<T extends _i2.Table, D>(
    _i2.TableInfo<T, D>? table,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [table]),
            returnValue: _FakeDeleteStatement_19<T, D>(
              this,
              Invocation.method(#delete, [table]),
            ),
          )
          as _i2.DeleteStatement<T, D>);

  @override
  _i5.Future<int> customUpdate(
    String? query, {
    List<_i2.Variable<Object>>? variables = const [],
    Set<_i2.ResultSetImplementation<dynamic, dynamic>>? updates,
    _i2.UpdateKind? updateKind,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customUpdate,
              [query],
              {
                #variables: variables,
                #updates: updates,
                #updateKind: updateKind,
              },
            ),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<int> customInsert(
    String? query, {
    List<_i2.Variable<Object>>? variables = const [],
    Set<_i2.ResultSetImplementation<dynamic, dynamic>>? updates,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customInsert,
              [query],
              {#variables: variables, #updates: updates},
            ),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<List<_i2.QueryRow>> customWriteReturning(
    String? query, {
    List<_i2.Variable<Object>>? variables = const [],
    Set<_i2.ResultSetImplementation<dynamic, dynamic>>? updates,
    _i2.UpdateKind? updateKind,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customWriteReturning,
              [query],
              {
                #variables: variables,
                #updates: updates,
                #updateKind: updateKind,
              },
            ),
            returnValue: _i5.Future<List<_i2.QueryRow>>.value(<_i2.QueryRow>[]),
          )
          as _i5.Future<List<_i2.QueryRow>>);

  @override
  _i2.Selectable<_i2.QueryRow> customSelect(
    String? query, {
    List<_i2.Variable<Object>>? variables = const [],
    Set<_i2.ResultSetImplementation<dynamic, dynamic>>? readsFrom = const {},
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customSelect,
              [query],
              {#variables: variables, #readsFrom: readsFrom},
            ),
            returnValue: _FakeSelectable_20<_i2.QueryRow>(
              this,
              Invocation.method(
                #customSelect,
                [query],
                {#variables: variables, #readsFrom: readsFrom},
              ),
            ),
          )
          as _i2.Selectable<_i2.QueryRow>);

  @override
  _i2.Selectable<_i2.QueryRow> customSelectQuery(
    String? query, {
    List<_i2.Variable<Object>>? variables = const [],
    Set<_i2.ResultSetImplementation<dynamic, dynamic>>? readsFrom = const {},
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customSelectQuery,
              [query],
              {#variables: variables, #readsFrom: readsFrom},
            ),
            returnValue: _FakeSelectable_20<_i2.QueryRow>(
              this,
              Invocation.method(
                #customSelectQuery,
                [query],
                {#variables: variables, #readsFrom: readsFrom},
              ),
            ),
          )
          as _i2.Selectable<_i2.QueryRow>);

  @override
  _i5.Future<void> customStatement(String? statement, [List<dynamic>? args]) =>
      (super.noSuchMethod(
            Invocation.method(#customStatement, [statement, args]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<T> transaction<T>(
    _i5.Future<T> Function()? action, {
    bool? requireNew = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #transaction,
              [action],
              {#requireNew: requireNew},
            ),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #transaction,
                      [action],
                      {#requireNew: requireNew},
                    ),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_13<T>(
                  this,
                  Invocation.method(
                    #transaction,
                    [action],
                    {#requireNew: requireNew},
                  ),
                ),
          )
          as _i5.Future<T>);

  @override
  _i5.Future<T> exclusively<T>(_i5.Future<T> Function()? action) =>
      (super.noSuchMethod(
            Invocation.method(#exclusively, [action]),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#exclusively, [action]),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_13<T>(
                  this,
                  Invocation.method(#exclusively, [action]),
                ),
          )
          as _i5.Future<T>);

  @override
  _i5.Future<void> batch(_i5.FutureOr<void> Function(_i2.Batch)? runInBatch) =>
      (super.noSuchMethod(
            Invocation.method(#batch, [runInBatch]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<T> runWithInterceptor<T>(
    _i5.Future<T> Function()? action, {
    required _i2.QueryInterceptor? interceptor,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #runWithInterceptor,
              [action],
              {#interceptor: interceptor},
            ),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #runWithInterceptor,
                      [action],
                      {#interceptor: interceptor},
                    ),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_13<T>(
                  this,
                  Invocation.method(
                    #runWithInterceptor,
                    [action],
                    {#interceptor: interceptor},
                  ),
                ),
          )
          as _i5.Future<T>);

  @override
  _i2.GenerationContext $write(
    _i2.Component? component, {
    bool? hasMultipleTables,
    int? startIndex,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #$write,
              [component],
              {#hasMultipleTables: hasMultipleTables, #startIndex: startIndex},
            ),
            returnValue: _FakeGenerationContext_21(
              this,
              Invocation.method(
                #$write,
                [component],
                {
                  #hasMultipleTables: hasMultipleTables,
                  #startIndex: startIndex,
                },
              ),
            ),
          )
          as _i2.GenerationContext);

  @override
  _i2.GenerationContext $writeInsertable(
    _i2.TableInfo<_i2.Table, dynamic>? table,
    _i2.Insertable<dynamic>? insertable, {
    int? startIndex,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #$writeInsertable,
              [table, insertable],
              {#startIndex: startIndex},
            ),
            returnValue: _FakeGenerationContext_21(
              this,
              Invocation.method(
                #$writeInsertable,
                [table, insertable],
                {#startIndex: startIndex},
              ),
            ),
          )
          as _i2.GenerationContext);

  @override
  String $expandVar(int? start, int? amount) =>
      (super.noSuchMethod(
            Invocation.method(#$expandVar, [start, amount]),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.method(#$expandVar, [start, amount]),
            ),
          )
          as String);
}

/// A class which mocks [SquirrelRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSquirrelRepository extends _i1.Mock
    implements _i7.SquirrelRepository {
  MockSquirrelRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> addSquirrel(_i8.Squirrel? squirrel) =>
      (super.noSuchMethod(
            Invocation.method(#addSquirrel, [squirrel]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateSquirrel(_i8.Squirrel? squirrel) =>
      (super.noSuchMethod(
            Invocation.method(#updateSquirrel, [squirrel]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteSquirrel(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteSquirrel, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i8.Squirrel?> getSquirrel(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getSquirrel, [id]),
            returnValue: _i5.Future<_i8.Squirrel?>.value(),
          )
          as _i5.Future<_i8.Squirrel?>);

  @override
  _i5.Future<List<_i8.Squirrel>> getAllSquirrels() =>
      (super.noSuchMethod(
            Invocation.method(#getAllSquirrels, []),
            returnValue: _i5.Future<List<_i8.Squirrel>>.value(<_i8.Squirrel>[]),
          )
          as _i5.Future<List<_i8.Squirrel>>);

  @override
  _i5.Future<List<_i8.Squirrel>> getActiveSquirrels() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveSquirrels, []),
            returnValue: _i5.Future<List<_i8.Squirrel>>.value(<_i8.Squirrel>[]),
          )
          as _i5.Future<List<_i8.Squirrel>>);

  @override
  _i5.Future<List<_i8.Squirrel>> getSquirrelsByStatus(
    _i8.SquirrelStatus? status,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getSquirrelsByStatus, [status]),
            returnValue: _i5.Future<List<_i8.Squirrel>>.value(<_i8.Squirrel>[]),
          )
          as _i5.Future<List<_i8.Squirrel>>);

  @override
  _i5.Future<int> getSquirrelCount() =>
      (super.noSuchMethod(
            Invocation.method(#getSquirrelCount, []),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<void> updateSquirrelWeight(String? squirrelId, double? weight) =>
      (super.noSuchMethod(
            Invocation.method(#updateSquirrelWeight, [squirrelId, weight]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i8.Squirrel>> getSquirrelsNeedingAttention() =>
      (super.noSuchMethod(
            Invocation.method(#getSquirrelsNeedingAttention, []),
            returnValue: _i5.Future<List<_i8.Squirrel>>.value(<_i8.Squirrel>[]),
          )
          as _i5.Future<List<_i8.Squirrel>>);

  @override
  _i5.Stream<List<_i8.Squirrel>> watchAllSquirrels() =>
      (super.noSuchMethod(
            Invocation.method(#watchAllSquirrels, []),
            returnValue: _i5.Stream<List<_i8.Squirrel>>.empty(),
          )
          as _i5.Stream<List<_i8.Squirrel>>);

  @override
  _i5.Stream<List<_i8.Squirrel>> watchActiveSquirrels() =>
      (super.noSuchMethod(
            Invocation.method(#watchActiveSquirrels, []),
            returnValue: _i5.Stream<List<_i8.Squirrel>>.empty(),
          )
          as _i5.Stream<List<_i8.Squirrel>>);

  @override
  _i5.Stream<_i8.Squirrel?> watchSquirrel(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#watchSquirrel, [id]),
            returnValue: _i5.Stream<_i8.Squirrel?>.empty(),
          )
          as _i5.Stream<_i8.Squirrel?>);
}

/// A class which mocks [FeedingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeedingRepository extends _i1.Mock implements _i9.FeedingRepository {
  MockFeedingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> addFeedingRecord(_i8.FeedingRecord? record) =>
      (super.noSuchMethod(
            Invocation.method(#addFeedingRecord, [record]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateFeedingRecord(_i8.FeedingRecord? record) =>
      (super.noSuchMethod(
            Invocation.method(#updateFeedingRecord, [record]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteFeedingRecord(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFeedingRecord, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i8.FeedingRecord>> getFeedingRecords(String? squirrelId) =>
      (super.noSuchMethod(
            Invocation.method(#getFeedingRecords, [squirrelId]),
            returnValue: _i5.Future<List<_i8.FeedingRecord>>.value(
              <_i8.FeedingRecord>[],
            ),
          )
          as _i5.Future<List<_i8.FeedingRecord>>);

  @override
  _i5.Future<List<_i8.FeedingRecord>> getRecentFeedingRecords({
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getRecentFeedingRecords, [], {#limit: limit}),
            returnValue: _i5.Future<List<_i8.FeedingRecord>>.value(
              <_i8.FeedingRecord>[],
            ),
          )
          as _i5.Future<List<_i8.FeedingRecord>>);

  @override
  _i5.Future<_i8.FeedingRecord?> getLastFeedingRecord(String? squirrelId) =>
      (super.noSuchMethod(
            Invocation.method(#getLastFeedingRecord, [squirrelId]),
            returnValue: _i5.Future<_i8.FeedingRecord?>.value(),
          )
          as _i5.Future<_i8.FeedingRecord?>);

  @override
  _i5.Future<List<_i8.FeedingRecord>> getFeedingRecordsInRange(
    String? squirrelId,
    DateTime? start,
    DateTime? end,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getFeedingRecordsInRange, [
              squirrelId,
              start,
              end,
            ]),
            returnValue: _i5.Future<List<_i8.FeedingRecord>>.value(
              <_i8.FeedingRecord>[],
            ),
          )
          as _i5.Future<List<_i8.FeedingRecord>>);

  @override
  _i5.Future<Map<String, int>> getFeedingFrequency(String? squirrelId) =>
      (super.noSuchMethod(
            Invocation.method(#getFeedingFrequency, [squirrelId]),
            returnValue: _i5.Future<Map<String, int>>.value(<String, int>{}),
          )
          as _i5.Future<Map<String, int>>);

  @override
  _i5.Future<List<_i8.FeedingRecord>> getTodaysFeedingRecords(
    String? squirrelId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getTodaysFeedingRecords, [squirrelId]),
            returnValue: _i5.Future<List<_i8.FeedingRecord>>.value(
              <_i8.FeedingRecord>[],
            ),
          )
          as _i5.Future<List<_i8.FeedingRecord>>);

  @override
  _i5.Stream<List<_i8.FeedingRecord>> watchFeedingRecords(String? squirrelId) =>
      (super.noSuchMethod(
            Invocation.method(#watchFeedingRecords, [squirrelId]),
            returnValue: _i5.Stream<List<_i8.FeedingRecord>>.empty(),
          )
          as _i5.Stream<List<_i8.FeedingRecord>>);

  @override
  _i5.Stream<List<_i8.FeedingRecord>> watchRecentFeedingRecords({
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#watchRecentFeedingRecords, [], {#limit: limit}),
            returnValue: _i5.Stream<List<_i8.FeedingRecord>>.empty(),
          )
          as _i5.Stream<List<_i8.FeedingRecord>>);
}

/// A class which mocks [CareNoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCareNoteRepository extends _i1.Mock
    implements _i10.CareNoteRepository {
  MockCareNoteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> addCareNote(_i8.CareNote? note) =>
      (super.noSuchMethod(
            Invocation.method(#addCareNote, [note]),
            returnValue: _i5.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#addCareNote, [note]),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<_i8.CareNote?> getCareNote(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getCareNote, [id]),
            returnValue: _i5.Future<_i8.CareNote?>.value(),
          )
          as _i5.Future<_i8.CareNote?>);

  @override
  _i5.Future<List<_i8.CareNote>> getCareNotes(String? squirrelId) =>
      (super.noSuchMethod(
            Invocation.method(#getCareNotes, [squirrelId]),
            returnValue: _i5.Future<List<_i8.CareNote>>.value(<_i8.CareNote>[]),
          )
          as _i5.Future<List<_i8.CareNote>>);

  @override
  _i5.Future<List<_i8.CareNote>> getCareNotesByType(
    String? squirrelId,
    _i8.CareNoteType? type,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCareNotesByType, [squirrelId, type]),
            returnValue: _i5.Future<List<_i8.CareNote>>.value(<_i8.CareNote>[]),
          )
          as _i5.Future<List<_i8.CareNote>>);

  @override
  _i5.Future<List<_i8.CareNote>> getImportantCareNotes(String? squirrelId) =>
      (super.noSuchMethod(
            Invocation.method(#getImportantCareNotes, [squirrelId]),
            returnValue: _i5.Future<List<_i8.CareNote>>.value(<_i8.CareNote>[]),
          )
          as _i5.Future<List<_i8.CareNote>>);

  @override
  _i5.Future<List<_i8.CareNote>> getRecentCareNotes({int? limit = 20}) =>
      (super.noSuchMethod(
            Invocation.method(#getRecentCareNotes, [], {#limit: limit}),
            returnValue: _i5.Future<List<_i8.CareNote>>.value(<_i8.CareNote>[]),
          )
          as _i5.Future<List<_i8.CareNote>>);

  @override
  _i5.Future<List<_i8.CareNote>> getCareNotesInRange(
    String? squirrelId,
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCareNotesInRange, [
              squirrelId,
              startDate,
              endDate,
            ]),
            returnValue: _i5.Future<List<_i8.CareNote>>.value(<_i8.CareNote>[]),
          )
          as _i5.Future<List<_i8.CareNote>>);

  @override
  _i5.Future<List<_i8.CareNote>> searchCareNotes(
    String? squirrelId,
    String? searchQuery,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#searchCareNotes, [squirrelId, searchQuery]),
            returnValue: _i5.Future<List<_i8.CareNote>>.value(<_i8.CareNote>[]),
          )
          as _i5.Future<List<_i8.CareNote>>);

  @override
  _i5.Future<List<_i8.CareNote>> searchAllCareNotes(String? searchQuery) =>
      (super.noSuchMethod(
            Invocation.method(#searchAllCareNotes, [searchQuery]),
            returnValue: _i5.Future<List<_i8.CareNote>>.value(<_i8.CareNote>[]),
          )
          as _i5.Future<List<_i8.CareNote>>);

  @override
  _i5.Future<List<_i8.CareNote>> getCareNotesWithPhotos(String? squirrelId) =>
      (super.noSuchMethod(
            Invocation.method(#getCareNotesWithPhotos, [squirrelId]),
            returnValue: _i5.Future<List<_i8.CareNote>>.value(<_i8.CareNote>[]),
          )
          as _i5.Future<List<_i8.CareNote>>);

  @override
  _i5.Future<Map<_i8.CareNoteType, int>> getCareNoteCountsByType(
    String? squirrelId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCareNoteCountsByType, [squirrelId]),
            returnValue: _i5.Future<Map<_i8.CareNoteType, int>>.value(
              <_i8.CareNoteType, int>{},
            ),
          )
          as _i5.Future<Map<_i8.CareNoteType, int>>);

  @override
  _i5.Future<bool> updateCareNote(_i8.CareNote? note) =>
      (super.noSuchMethod(
            Invocation.method(#updateCareNote, [note]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> deleteCareNote(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCareNote, [id]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<int> deleteCareNotesForSquirrel(String? squirrelId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCareNotesForSquirrel, [squirrelId]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Stream<List<_i8.CareNote>> watchCareNotes(String? squirrelId) =>
      (super.noSuchMethod(
            Invocation.method(#watchCareNotes, [squirrelId]),
            returnValue: _i5.Stream<List<_i8.CareNote>>.empty(),
          )
          as _i5.Stream<List<_i8.CareNote>>);

  @override
  _i5.Stream<List<_i8.CareNote>> watchImportantCareNotes(String? squirrelId) =>
      (super.noSuchMethod(
            Invocation.method(#watchImportantCareNotes, [squirrelId]),
            returnValue: _i5.Stream<List<_i8.CareNote>>.empty(),
          )
          as _i5.Stream<List<_i8.CareNote>>);

  @override
  _i5.Stream<List<_i8.CareNote>> watchRecentCareNotes({int? limit = 20}) =>
      (super.noSuchMethod(
            Invocation.method(#watchRecentCareNotes, [], {#limit: limit}),
            returnValue: _i5.Stream<List<_i8.CareNote>>.empty(),
          )
          as _i5.Stream<List<_i8.CareNote>>);

  @override
  _i5.Stream<_i8.CareNote?> watchCareNote(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#watchCareNote, [id]),
            returnValue: _i5.Stream<_i8.CareNote?>.empty(),
          )
          as _i5.Stream<_i8.CareNote?>);
}

/// A class which mocks [WeightRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeightRepository extends _i1.Mock implements _i11.WeightRepository {
  MockWeightRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i11.WeightDataPoint>> getWeightTrendData(
    String? squirrelId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getWeightTrendData, [squirrelId]),
            returnValue: _i5.Future<List<_i11.WeightDataPoint>>.value(
              <_i11.WeightDataPoint>[],
            ),
          )
          as _i5.Future<List<_i11.WeightDataPoint>>);

  @override
  _i5.Future<double?> getLatestWeight(String? squirrelId) =>
      (super.noSuchMethod(
            Invocation.method(#getLatestWeight, [squirrelId]),
            returnValue: _i5.Future<double?>.value(),
          )
          as _i5.Future<double?>);

  @override
  _i5.Future<double?> getAverageWeight(
    String? squirrelId,
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getAverageWeight, [
              squirrelId,
              startDate,
              endDate,
            ]),
            returnValue: _i5.Future<double?>.value(),
          )
          as _i5.Future<double?>);

  @override
  _i5.Future<double?> getWeightChange(
    String? squirrelId,
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getWeightChange, [
              squirrelId,
              startDate,
              endDate,
            ]),
            returnValue: _i5.Future<double?>.value(),
          )
          as _i5.Future<double?>);
}
